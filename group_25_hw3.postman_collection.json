{
	"info": {
		"_postman_id": "b6675319-1198-42a7-88b2-b67ed5f90719",
		"name": "group_25_hw3",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Приходящий токен необходимо передать во все остальные запросы. Дальше все запросы требуют наличие токена.",
							"let jsonData = pm.response.json();",
							"pm.environment.set(\"token\", jsonData.token)",
							"console.log(\"Token is created.\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "pavel92",
							"type": "string"
						},
						{
							"key": "password",
							"value": "QA12",
							"type": "string"
						}
					]
				},
				"url": {
					"raw": "{{url}}/login",
					"host": [
						"{{url}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "User Info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Проверить статус код 200.",
							"pm.test(\"Status code is 200\", function () {",
							"pm.response.to.have.status(200);",
							"console.log(\"Status code is 200.\");",
							"});",
							"// 2. Проверка структуры json в ответе. ",
							"let jsonData=JSON.parse(responseBody); ",
							"    const schema= ",
							"    {\"type\": \"object\",\"properties\": ",
							"    {\"person\": {",
							"        \"type\": \"object\",\"properties\":",
							"        {\"u_age\":{\"type\":\"integer\"},",
							"        \"u_name\": {\"type\": \"array\",\"items\": [",
							"            {\"type\": \"string\"},",
							"            {\"type\": \"integer\"},",
							"            {\"type\": \"integer\"}",
							"            ]},",
							"        \"u_salary_1_5_year\": {\"type\": \"integer\"}},",
							"         \"required\": [\"u_age\",\"u_name\",\"u_salary_1_5_year\"]",
							"     },",
							"    \"qa_salary_after_12_months\": {\"type\": \"number\"},",
							"    \"qa_salary_after_6_months\":{\"type\":\"integer\"},",
							"    \"start_qa_salary\": {\"type\": \"integer\"}},",
							"    \"required\": [\"person\",\"qa_salary_after_12_months\",\"qa_salary_after_6_months\",\"start_qa_salary\"]",
							"    }",
							"pm.test(\"Checking JSON structure\",()=>{",
							"pm.response.to.be.jsonSchema(schema)}); ",
							"console.log(\"JSON structure is checked and valid.\")",
							"// 3. В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.",
							"const name=JSON.parse(request.data) ",
							"const name1=parseInt(name.salary)",
							"pm.test(\"start_qa_salary has right * coefficient\",()=>{",
							"pm.expect(jsonData.start_qa_salary).to.eql(name1)});",
							"console.log(\"start_qa_salary * coefficient is correct.\");",
							"pm.test(\"qa_salary_after_6_months has right * coefficient\", ()=> { ",
							"pm.expect(jsonData.qa_salary_after_6_months).to.eql(name1*2)});",
							"console.log(\"qa_salary_after_6_months * coefficient is correct.\");",
							"pm.test(\"qa_salary_after_12_months has right * coefficient\",()=>{",
							"pm.expect(jsonData.qa_salary_after_12_months).to.eql(name1*2.9)});",
							"console.log(\"qa_salary_after_12_months * coefficient is correct.\")",
							"pm.test(\"qa_salary_1_5_year has right * coefficient\", ()=> {",
							"pm.expect(jsonData.person.u_salary_1_5_year).to.eql(name1*4)});",
							"console.log(\"qa_salary_after_1_5_year * coefficient is correct.\")",
							"// 4. Достать значение из поля 'u_salary_1.5_year' и передать в поле salary запроса http://162.55.220.72:5005/get_test_user",
							"pm.environment.set(\"user_info_salary_1_5_year\",jsonData.person.u_salary_1_5_year)",
							"console.log(\"user_info_salary_1_5_year variable is set as salary to {{url}}/get_test_user.\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"age\": 29,\n    \"salary\": 2000,\n    \"name\": \"Pavel\",\n    \"auth_token\": \"{{token}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/user_info",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "New Data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Проверить статус код 200.",
							"pm.test(\"Status code is 200\", function () {",
							"pm.response.to.have.status(200);",
							"console.log(\"Status code is 200.\");",
							"});",
							"// 2. Проверка структуры json в ответе. ",
							"let jsonData=JSON.parse(responseBody); ",
							"    const schema= ",
							"    {\"type\": \"object\", ",
							"    \"properties\": ",
							"    {\"age\": {\"type\": \"integer\"},",
							"    \"name\": {\"type\": \"string\"},",
							"    \"salary\": {\"type\": \"array\",",
							"    \"items\": [",
							"            {\"type\": \"integer\"},",
							"            {\"type\": \"string\"},",
							"            {\"type\": \"string\"}",
							"            ]},",
							"    },",
							"    \"required\": [\"age\", \"name\", \"salary\"]",
							"    }",
							"    pm.test(\"Checking JSON structure\",()=>{",
							"    pm.response.to.be.jsonSchema(schema)}); ",
							"    console.log(\"JSON structure is checked and valid.\")",
							"// 3. В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.",
							"    const req = request.data;",
							"    const name1 = parseInt(req.salary) ",
							"    pm.test (\"Checking salary 0 * coefficient\",()=>{",
							"    pm.expect(jsonData.salary[0]).to.eql(name1)});",
							"    console.log(\"Salary 0 has right * coefficient.\")",
							"    pm.test (\"Checking salary 1 * coefficient\",()=>{",
							"    pm.expect(jsonData.salary[1]).to.eql/(name1*2)});",
							"    console.log(\"Salary 1 has right * coefficient.\")",
							"    pm.test (\"Checking salary 2 * coefficient\",()=>{",
							"    pm.expect(jsonData.salary[2]).to.eql/(name1*3)});",
							"    console.log(\"Salary 2 has right * coefficient.\")",
							"// 4. Проверить, что 2-й элемент массива salary больше 1-го и 0-го.",
							"    pm.test(\"Checking if 2nd element is greater than 1st and 0th\",function(){",
							"    pm.expect(parseInt(jsonData.salary[2])).to.be.above((parseInt(jsonData.salary[1])) && (parseInt(jsonData.salary[0])))}); ",
							"    console.log(\"2nd element indeed is greater than 1st and 0th.\")"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "29",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "2000",
							"type": "default"
						},
						{
							"key": "name",
							"value": "Pavel",
							"type": "default"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "{{url}}/new_data",
					"host": [
						"{{url}}"
					],
					"path": [
						"new_data"
					]
				}
			},
			"response": []
		},
		{
			"name": "Test Pet Info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Проверить статус код 200.",
							"pm.test(\"Status code is 200\", function () {",
							"pm.response.to.have.status(200);",
							"console.log(\"Status code is 200.\");",
							"});",
							"// 2. Проверка структуры json в ответе. ",
							"let jsonData=JSON.parse(responseBody); ",
							"    const schema=",
							"    {\"type\": \"object\", ",
							"    \"properties\":",
							"    {\"age\": {\"type\": \"integer\"},",
							"    \"daily_food\": {\"type\": \"number\"},",
							"    \"daily_sleep\": {\"type\": \"number\"},",
							"    \"name\": {\"type\": \"string\"}",
							"    },",
							"    \"required\": [\"age\", \"daily_food\", \"daily_sleep\", \"name\"]",
							"    }",
							"    pm.test(\"Checking JSON structure\",()=>{",
							"    pm.response.to.be.jsonSchema(schema)}); ",
							"    console.log(\"JSON structure is checked and valid.\")",
							"// 3. В ответе указаны коэффициенты умножения weight, напишите тесты по проверке правильности результата перемножения на коэффициент.",
							"    pm.test (\"Checking if daily_food has right coefficient\",()=>{",
							"    pm.expect(pm.response.json().daily_food).to.be.eql(request.data.weight*0.012)}); ",
							"    console.log(\"Daily_food has correct coefficient.\")   ",
							"    pm.test (\"Checking if daily_sleep has right coefficient\",()=>{",
							"    pm.expect(pm.response.json().daily_sleep).to.be.eql(request.data.weight*2.5)});",
							"    console.log(\"Daily_sleep has correct coefficient.\")   "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "29",
							"type": "default"
						},
						{
							"key": "weight",
							"value": "97",
							"type": "default"
						},
						{
							"key": "name",
							"value": "Pavel",
							"type": "default"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "{{url}}/test_pet_info",
					"host": [
						"{{url}}"
					],
					"path": [
						"test_pet_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Test User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Проверить статус код 200.",
							"pm.test(\"Status code is 200\", function () {",
							"pm.response.to.have.status(200);",
							"console.log(\"Status code is 200.\");",
							"});",
							"// 2. Проверка структуры json в ответе. ",
							"let jsonData=JSON.parse(responseBody); ",
							"const schema= {\"type\": \"object\",",
							"  \"properties\": {",
							"    \"age\": {\"type\": \"string\"},",
							"    \"family\": {\"type\": \"object\",\"properties\": ",
							"    {\"children\": {\"type\": \"array\",",
							"        \"items\": ",
							"        [{\"type\": \"array\",\"items\": ",
							"        [{\"type\": \"string\"},",
							"         {\"type\": \"integer\"}]},",
							"        {\"type\": \"array\",\"items\": ",
							"        [{\"type\": \"string\"},",
							"        {\"type\": \"integer\"}]}",
							"        ]},",
							"    \"u_salary_1_5_year\": {\"type\": \"integer\"}",
							"    },",
							"    \"required\": [\"children\",\"u_salary_1_5_year\"]",
							"    },",
							"    \"name\": {\"type\": \"string\"},",
							"    \"salary\": {\"type\": \"integer\"}",
							"  },",
							"    \"required\": [\"age\",\"family\",\"name\",\"salary\"]",
							"  }",
							"    pm.test(\"Checking JSON structure\",()=>{",
							"    pm.response.to.be.jsonSchema(schema)});",
							"    console.log(\"JSON structure is checked and valid.\")",
							"// 3. Проверить, что значение поля name = значению переменной name из окружения.",
							"    pm.test(\"Checking if name response = name environment\",()=>{pm.expect(pm.response.json().name).to.be.equal(environment.name);});",
							"    console.log(\"Names are equal.\");",
							"// 4. Проверить, что значение поля age в ответе соответсвует отправленному в запросе значению поля age.",
							"    pm.test(\"Checking if age response = age request\",()=>{pm.expect(pm.response.json().age).to.be.equal(request.data.age);});",
							"    console.log(\"Ages are equal.\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "29",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "2000",
							"type": "default"
						},
						{
							"key": "name",
							"value": "Pavel",
							"type": "default"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "{{url}}/get_test_user",
					"host": [
						"{{url}}"
					],
					"path": [
						"get_test_user"
					]
				}
			},
			"response": []
		},
		{
			"name": "Currency",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Можете взять любой объект из присланного списка, используйте js random. В объекте возьмите Cur_ID и передать через окружение в следующий запрос.",
							"var jsonData = pm.response.json();",
							"function random_item(items)",
							"{",
							"return items[Math.floor(Math.random()*items.length)];",
							"}",
							"var random = random_item(jsonData).Cur_ID  ",
							"console.log(\"This time random number is: \" + random);",
							"pm.environment.set(\"curr_code\",random);",
							"// ***",
							"// 1. Получить список валют.",
							"// 2. Итерировать список валют.",
							"// 3. В каждой итерации отправлять запрос на сервер для получения курса каждой валюты.",
							"// 4. Если возвращается 500 код, переходим к следующей итреации.",
							"// 5. Если получаем 200 код, проверяем response json на наличие поля \"Cur_OfficialRate\".",
							"// 6. Если поле есть, пишем в консоль инфу про фалюту в виде response.",
							"// {",
							"//     \"Cur_Abbreviation\": str",
							"//     \"Cur_ID\": int,",
							"//     \"Cur_Name\": str,",
							"//     \"Cur_OfficialRate\": float,",
							"//     \"Cur_Scale\": int,",
							"//     \"Date\": str",
							"// }",
							"// 7. Переходим к следующей итерации.",
							"    let leng=jsonData.length;",
							"    console.log(leng);",
							"    for(var i=0; i <=leng ; i++){",
							"    const postRequest = {",
							"    url: 'http://162.55.220.72:5005/curr_byn',",
							"    method: 'POST',",
							"    body: {",
							"    'mode': 'formdata',",
							"            'formdata': [",
							"                {'key':'curr_code', 'value':jsonData[i].Cur_ID},",
							"                {'key':'auth_token', 'value':pm.environment.get(\"token\")}",
							"            ]",
							"    }}  ",
							"    pm.sendRequest(postRequest, (error, response) => {",
							"    if(pm.response.to.have.status(200)) ",
							"    {console.log(response.json())};",
							"    })}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "{{url}}/currency",
					"host": [
						"{{url}}"
					],
					"path": [
						"currency"
					]
				}
			},
			"response": []
		},
		{
			"name": "Curr Byn",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Проверить статус код 200.",
							"pm.test(\"Status code is 200\", function () {",
							"pm.response.to.have.status(200);",
							"console.log(\"Status code is 200.\");",
							"});",
							"// 2. Проверка структуры json в ответе.",
							"const schema= ",
							"    {\"type\": \"object\",\"properties\": ",
							"    {",
							"        \"Cur_Abbreviation\": {\"type\": \"string\"},",
							"        \"Cur_ID\": {\"type\": \"integer\"},",
							"        \"Cur_Name\": {\"type\": \"string\"},",
							"        \"Cur_OfficialRate\": {\"type\": \"number\"},",
							"        \"Cur_Scale\": {\"type\": \"integer\"},",
							"        \"Date\": {\"type\": \"string\"}",
							"    },",
							"    \"required\": [\"Cur_Abbreviation\",\"Cur_ID\",\"Cur_Name\",\"Cur_OfficialRate\",\"Cur_Scale\",\"Date\"]",
							"    }",
							"    pm.test(\"Checking JSON structure\",()=>{",
							"    pm.response.to.be.jsonSchema(schema)});",
							"    console.log(\"JSON structure is checked and valid.\")",
							"// ***",
							"// 1. Получить список валют.",
							"// 2. Итерировать список валют.",
							"// 3. В каждой итерации отправлять запрос на сервер для получения курса каждой валюты.",
							"// 4. Если возвращается 500 код, переходим к следующей итреации.",
							"// 5. Если получаем 200 код, проверяем response json на наличие поля \"Cur_OfficialRate\".",
							"// 6. Если поле есть, пишем в консоль инфу про фалюту в виде response.",
							"// {",
							"//     \"Cur_Abbreviation\": str",
							"//     \"Cur_ID\": int,",
							"//     \"Cur_Name\": str,",
							"//     \"Cur_OfficialRate\": float,",
							"//     \"Cur_Scale\": int,",
							"//     \"Date\": str",
							"// }",
							"// 7. Переходим к следующей итерации.",
							"    let jsonData=JSON.parse(responseBody);",
							"    let leng=jsonData.length;",
							"    console.log(leng);",
							"    for(var i=0; i <=leng ; i++){",
							"    const postRequest = {",
							"    url: 'http://162.55.220.72:5005/curr_byn',",
							"    method: 'POST',",
							"    body: {",
							"    'mode': 'formdata',",
							"            'formdata': [",
							"                {'key':'curr_code', 'value':jsonData[i].Cur_ID},",
							"                {'key':'auth_token', 'value':pm.environment.get(\"token\")}",
							"            ]",
							"    }}  ",
							"    pm.sendRequest(postRequest, (error, response) => {",
							"    if(pm.response.to.have.status(200)) ",
							"    {console.log(response.json())};",
							"    })}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "default"
						},
						{
							"key": "curr_code",
							"value": "497",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "{{url}}/curr_byn",
					"host": [
						"{{url}}"
					],
					"path": [
						"curr_byn"
					]
				}
			},
			"response": []
		}
	]
}





